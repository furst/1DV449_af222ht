{
  "name": "jquerygo",
  "version": "0.0.7",
  "description": "A node.js package to test and automate the web using jQuery with PhantomJS.",
  "author": {
    "name": "Travis Tidwell",
    "email": "travist349@gmail.com",
    "url": "http://github.com/travist"
  },
  "homepage": "http://github.com/travist/jquery.go.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/travist/jquery.go.js.git"
  },
  "bugs": {
    "url": "http://github.com/travist/jquery.go.js/issues"
  },
  "main": "./lib/jquery.go.js",
  "dependencies": {
    "node-phantom": ">=0",
    "underscore": ">=0",
    "async": ">=0",
    "asyncgo": ">=0",
    "phantomjs": "~1.9.1-9"
  },
  "readme": "jquery.go.js\n==============\nAn easy-to-use web testing and automation tool that uses the jQuery interface\nwithin Node.js to interact with the <a href=\"http://phantomjs.org\">Phantom.js</a> browser.\n\nNode.js + <a href=\"http://phantomjs.org\">Phantom.js</a> + jQuery = AwesomeSauce!\n---------------------------------------------\nWhat do you get when you combine three of the most exciting JavaScript\ntechnologies into a single package.  AwesomeSauce that's what.  Actually, what\nyou get is an easy to use browser testing and automation tool by utilizing the\njQuery interface within Node.js to interact with the <a href=\"http://phantomjs.org\">Phantom.js</a> browser.\n\nAnother jQuery wrapper in Node.js?...\n---------------------------------------------\nYes... but not really... Obviously, there are other technologies that wrap\nthe jQuery library within a Node.js environment, but this library is different.\n\nFor one, this library is not a complete API mirror of jQuery.  Every API\nis asynchronous (due to its interaction with <a href=\"http://phantomjs.org\">Phantom.js</a>), so there are some\ndifferences.  Because of this, I would rather think of this library as a tool\nfor testing and automation, but just uses the familar jQuery API to do so.\nTechnically speaking, it accomplishes this by simply passing along your commands\nto jQuery within <a href=\"http://phantomjs.org\">Phantom.js</a>, but there are also some other methods exposed to\nhelp with the task of testing and automation.\n\nIn particular is a method called <a href=\"https://github.com/travist/jquery.go.js#jquerygo---using-this-library-with-asyncjs\">jquery.go</a> that\nallows this library to be used with the <a href=\"https://github.com/caolan/async\">Async.js</a> library.\n\nInstallation\n---------------------------------------------\n- Obviously you need to install <a href=\"http://nodejs.org\">Node.js</a> to use this.\n- You can now use this library using the NPM package <strong>jquerygo</strong>\n\n```\nnpm install jquerygo\n```\n\nThe API\n---------------------------------------------\nEvery thing within jQuery (for the most part) is exposed to this library, but\ndone so asynchronously.  For example, to get the text of an element on the page,\nyou would use the following code.\n\n```\nvar $ = require('jquerygo');\n\n// Visit the user path and log in.\n$.visit('http://localhost:8888/user', function() {\n\n  // Get the title.\n  $('h1').text(function(text) {\n    console.log(text);\n    $.close();\n  });\n});\n```\n\nTo set the text of an element on the page, you still add your arguments after\ntext, but just include the callback to know when it is done..\n\n```\nvar $ = require('jquerygo');\n\n// Visit the user path and log in.\n$.visit('http://localhost:8888/user', function() {\n\n  // Set the title.\n  $('h1').text('New Title', function() {\n\n    // Get the title that was set.\n    $('h1').text(function(text) {\n\n      // Should print 'New Title'.\n      console.log(text);\n      $.close();\n    });\n  });\n});\n```\n\nYou may have noted that this makes jQuery chaining difficult.  You are right,\nbut you don't need to repeat your jQuery selectors since if you wish to chain,\nyou can just use the 'this' keyword in the callbacks to reference the same\nselector.\n\n```\nvar $ = require('jquerygo');\n\n// Visit the user path and log in.\n$.visit('http://localhost:8888/user', function() {\n\n  // Set the title.\n  $('h1').text('New Title', function() {\n\n    // Use 'this' to get the title of the same selector\n    this.text(function(text) {\n\n      // Should print 'New Title'.\n      console.log(text);\n      $.close();\n    });\n  });\n});\n```\n\nThe each method\n---------------------------------------------\nThis library also supports the ```each``` method, but its signature is a little\nbit different than core jQuery.  The main difference being that it must support\nasynchronous process flow using callback functions.  Here is an example of using\nthe each method.\n\n```\nvar $ = require('jquerygo');\n\n// Add some default configs.\n$.config.site = 'http://localhost:8888';\n$.config.addJQuery = false;\n\n// Using each method.\n$.visit('/node', function() {\n\n  // Iterate over each 'h2 a' elements.\n  $('h2 a').each(function(index, element, done) {\n\n    // Get the text for the element.\n    this.text(function(text) {\n\n      // Log the text.\n      console.log(text);\n\n      // We MUST call the done() method to say when we are done with this iteration.\n      done();\n    });\n  },\n\n  // This method is called after all the items have been iterated over...\n  function() {\n\n    // Log that we are done and close the browser.\n    console.log('done');\n    $.close();\n  });\n});\n```\n\nThat is pretty much what you need to know regarding differences between jQuery\ninterface compared to what you are used to.\n\nScreen Capture\n---------------------------------------------\nThis library also allows you to take a screen capture during your testing and\nautomation.  This can be done using the ```$.capture``` method. You can also\nuse this along with ```__dirname``` to take a screen shot within the directory\nthat your automation script resides.\n\n```\n$.capture(__dirname + '/screenshot.png');\n```\n\nAdditional API's\n---------------------------------------------\nThere are also some added API's that make your testing and automation easier.\nThey are as follows.\n\n- <strong>visit</strong>: function(url, callback)\n\n  Visit a webpage.\n    - url:  The url you wish to visit.\n    - callback:  Called when you are done visiting that page.\n\n```\n// Visit the user path and log in.\n$.visit('http://localhost;8888', function() {\n  console.log('You have visited the page!');\n  $.close();\n});\n```\n\n- <strong>waitForPage</strong>: function(callback)\n\n  Wait for a page to load.  Useful after you press Submit on a form.\n    - callback: Called when the page is done loading.\n\n```\n$.visit('/user', function() {\n  $('#edit-name').val('admin', function() {\n    $('#edit-pass').val('123password', function() {\n      $('#edit-submit').click(function() {\n        $.waitForPage(function() {\n          console.log('You have logged in!');\n          $.close();\n        });\n      });\n    });\n  });\n});\n```\n\n- <strong>waitForElement</strong>: function(element, callback)\n\n  Wait for an element to appear on the page.  Useful when you are waiting\n  for an AJAX request to return which sets an element on the page.\n\n    - element:  The element selector that you wish to wait for.\n    - callback: Called when that element is present.\n\n- <strong>close</strong>: function()\n\n  Closes the <a href=\"http://phantomjs.org\">Phantom.js</a> browser.\n\n- <strong>config</strong>: object\n\n  An object of configurations for this library.\n\n  - site: (string, default='') - A base url for the site so that all other 'visit' calls could be relative.\n  - addJQuery: (boolean, default=TRUE) - TRUE if you need to add jQuery to the page you are visiting, FALSE if the page already adds jQuery.\n  - jQuery: (string, default='http://code.jquery.com/jquery-1.9.1.min.js') - The CDN url of the jQuery to add to the page if addJQuery is set to TRUE.\n\n```\n\nvar $ = require('jquerygo');\n\n// Add some default configs.\n$.config.site = 'http://localhost:8888';\n$.config.addJQuery = false;\n\n// Visit the user path and log in.\n$.visit('/user', function() {\n  $('#edit-name').val('admin', function() {\n    $('#edit-pass').val('123password', function() {\n      $('#edit-submit').click(function() {\n        $.waitForPage(function() {\n          console.log('You are logged in!');\n        });\n      });\n    });\n  });\n});\n\n```\n\njQuery.go - Using this library with <a href=\"https://github.com/caolan/async\">Async.js</a>\n---------------------------------------------\nThis library is called jQuery.go for a reason.  It is because there is a special\nmethod that is used to interact with the <a href=\"https://github.com/caolan/async\">Async.js</a> library\nthat provides an easy way to provide a serial looking interface when building your\ntests.  This can work with the Async.js library by calling the <strong>go</strong> method and\nwhatever functions you wish to call after that as arguments to that method.\n\nA great example is to take the previous example shown above and rewrite it using <strong>jQuery.go</strong>\nmethod.\n\n```\nvar async = require('async');\nvar $ = require('../lib/jquery.go.js');\n\n// Add some default configs.\n$.config.site = 'http://localhost:8888';\n$.config.addJQuery = false;\n\n// Using the async.series with jQuery.go.\nasync.series([\n  $.go('visit', '/user'),\n  $('#edit-name').go('val', 'admin'),\n  $('#edit-pass').go('val', '123testing'),\n  $('#edit-submit').go('click'),\n  $.go('waitForPage'),\n  function(done) {\n\n    // Make sure that the logout link is shown.\n    $('a[href=\"/user/logout\"]').text(function(text) {\n      console.log(text);\n      done();\n    });\n  }\n], function() {\n  console.log('You are logged in!');\n  $.close();\n});\n```\n\nThis makes it so that you do not fall into Callback hell when developing your automation and tests.\n",
  "readmeFilename": "README.md",
  "_id": "jquerygo@0.0.7",
  "dist": {
    "shasum": "8cf6f7d369b2fe8ad2ac88063ef562a733b10f12"
  },
  "_from": "jquerygo@",
  "_resolved": "https://registry.npmjs.org/jquerygo/-/jquerygo-0.0.7.tgz"
}
